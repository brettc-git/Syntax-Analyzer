Analysis for test2.txt
==================================================

     <Rat25S> -> $$ <Opt Function Definitions> $$ <Opt Declaration List> $$ <Statement List> $$
**Token: Separator       Lexeme: $$**
     <Opt Function Definitions> -> <Function Definitions>
     <Function Definitions> -> <Function> | <Function> <Function Definitions>
     <Function> -> function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
**Token: Keyword         Lexeme: function**
**Token: Identifier      Lexeme: add**
**Token: Separator       Lexeme: (**
     <Opt Parameter List> -> <Parameter List>
     <Parameter List> -> <Parameter> | <Parameter> , <Parameter List>
     <Parameter> -> <IDs> <Qualifier>
     <IDs> -> <Identifier> | <Identifier>, <IDs>
**Token: Identifier      Lexeme: a**
     <Qualifier> -> integer | boolean | real
**Token: Keyword         Lexeme: integer**
**Token: Separator       Lexeme: ,**
     <Parameter List> -> <Parameter> | <Parameter> , <Parameter List>
     <Parameter> -> <IDs> <Qualifier>
     <IDs> -> <Identifier> | <Identifier>, <IDs>
**Token: Identifier      Lexeme: b**
     <Qualifier> -> integer | boolean | real
**Token: Keyword         Lexeme: integer**
**Token: Separator       Lexeme: )**
     <Opt Declaration List> -> <Empty>
     <Empty> -> epsilon
     <Body> -> { <Statement List> }
**Token: Separator       Lexeme: {**
     <Statement List> -> <Statement> | <Statement> <Statement List>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Return> -> return <Return Prime>
**Token: Keyword         Lexeme: return**
     <Return Prime> -> <Expression> ;
     <Expression> -> <Term> <Expression Prime>
     <Term> -> <Factor><Term Prime>
     <Factor> -> <Primary>
     <Primary> -> <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | <Real> | true | false
**Token: Identifier      Lexeme: a**
     <Primary Prime> -> <Empty>
     <Empty> -> epsilon
     <Term Prime> -> <Empty>
     <Empty> -> epsilon
     <Expression Prime> -> +<Term><Expression Prime> | -<Term><Expression Prime>
**Token: Operator        Lexeme: +**
     <Term> -> <Factor><Term Prime>
     <Factor> -> <Primary>
     <Primary> -> <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | <Real> | true | false
**Token: Identifier      Lexeme: b**
     <Primary Prime> -> <Empty>
     <Empty> -> epsilon
     <Term Prime> -> <Empty>
     <Empty> -> epsilon
     <Expression Prime> -> <Empty>
     <Empty> -> epsilon
**Token: Separator       Lexeme: ;**
**Token: Separator       Lexeme: }**
     <Function Definitions> -> <Function> | <Function> <Function Definitions>
     <Function> -> function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
**Token: Keyword         Lexeme: function**
**Token: Identifier      Lexeme: subtract**
**Token: Separator       Lexeme: (**
     <Opt Parameter List> -> <Parameter List>
     <Parameter List> -> <Parameter> | <Parameter> , <Parameter List>
     <Parameter> -> <IDs> <Qualifier>
     <IDs> -> <Identifier> | <Identifier>, <IDs>
**Token: Identifier      Lexeme: a**
     <Qualifier> -> integer | boolean | real
**Token: Keyword         Lexeme: integer**
**Token: Separator       Lexeme: ,**
     <Parameter List> -> <Parameter> | <Parameter> , <Parameter List>
     <Parameter> -> <IDs> <Qualifier>
     <IDs> -> <Identifier> | <Identifier>, <IDs>
**Token: Identifier      Lexeme: b**
     <Qualifier> -> integer | boolean | real
**Token: Keyword         Lexeme: integer**
**Token: Separator       Lexeme: )**
     <Opt Declaration List> -> <Empty>
     <Empty> -> epsilon
     <Body> -> { <Statement List> }
**Token: Separator       Lexeme: {**
     <Statement List> -> <Statement> | <Statement> <Statement List>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Return> -> return <Return Prime>
**Token: Keyword         Lexeme: return**
     <Return Prime> -> <Expression> ;
     <Expression> -> <Term> <Expression Prime>
     <Term> -> <Factor><Term Prime>
     <Factor> -> <Primary>
     <Primary> -> <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | <Real> | true | false
**Token: Identifier      Lexeme: a**
     <Primary Prime> -> <Empty>
     <Empty> -> epsilon
     <Term Prime> -> <Empty>
     <Empty> -> epsilon
     <Expression Prime> -> +<Term><Expression Prime> | -<Term><Expression Prime>
**Token: Operator        Lexeme: -**
     <Term> -> <Factor><Term Prime>
     <Factor> -> <Primary>
     <Primary> -> <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | <Real> | true | false
**Token: Identifier      Lexeme: b**
     <Primary Prime> -> <Empty>
     <Empty> -> epsilon
     <Term Prime> -> <Empty>
     <Empty> -> epsilon
     <Expression Prime> -> <Empty>
     <Empty> -> epsilon
**Token: Separator       Lexeme: ;**
**Token: Separator       Lexeme: }**
     <Function Definitions> -> <Function> | <Function> <Function Definitions>
     <Function> -> function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
**Token: Keyword         Lexeme: function**
**Token: Identifier      Lexeme: multiply**
**Token: Separator       Lexeme: (**
     <Opt Parameter List> -> <Parameter List>
     <Parameter List> -> <Parameter> | <Parameter> , <Parameter List>
     <Parameter> -> <IDs> <Qualifier>
     <IDs> -> <Identifier> | <Identifier>, <IDs>
**Token: Identifier      Lexeme: a**
     <Qualifier> -> integer | boolean | real
**Token: Keyword         Lexeme: integer**
**Token: Separator       Lexeme: ,**
     <Parameter List> -> <Parameter> | <Parameter> , <Parameter List>
     <Parameter> -> <IDs> <Qualifier>
     <IDs> -> <Identifier> | <Identifier>, <IDs>
**Token: Identifier      Lexeme: b**
     <Qualifier> -> integer | boolean | real
**Token: Keyword         Lexeme: integer**
**Token: Separator       Lexeme: )**
     <Opt Declaration List> -> <Empty>
     <Empty> -> epsilon
     <Body> -> { <Statement List> }
**Token: Separator       Lexeme: {**
     <Statement List> -> <Statement> | <Statement> <Statement List>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Return> -> return <Return Prime>
**Token: Keyword         Lexeme: return**
     <Return Prime> -> <Expression> ;
     <Expression> -> <Term> <Expression Prime>
     <Term> -> <Factor><Term Prime>
     <Factor> -> <Primary>
     <Primary> -> <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | <Real> | true | false
**Token: Identifier      Lexeme: a**
     <Primary Prime> -> <Empty>
     <Empty> -> epsilon
     <Term Prime> -> * <Factor> <Term Prime> | / <Factor> <Term Prime>
**Token: Operator        Lexeme: ***
     <Factor> -> <Primary>
     <Primary> -> <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | <Real> | true | false
**Token: Identifier      Lexeme: b**
     <Primary Prime> -> <Empty>
     <Empty> -> epsilon
     <Term Prime> -> <Empty>
     <Empty> -> epsilon
     <Expression Prime> -> <Empty>
     <Empty> -> epsilon
**Token: Separator       Lexeme: ;**
**Token: Separator       Lexeme: }**
     <Function Definitions> -> <Function> | <Function> <Function Definitions>
     <Function> -> function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
**Token: Keyword         Lexeme: function**
**Token: Identifier      Lexeme: divide**
**Token: Separator       Lexeme: (**
     <Opt Parameter List> -> <Parameter List>
     <Parameter List> -> <Parameter> | <Parameter> , <Parameter List>
     <Parameter> -> <IDs> <Qualifier>
     <IDs> -> <Identifier> | <Identifier>, <IDs>
**Token: Identifier      Lexeme: a**
     <Qualifier> -> integer | boolean | real
**Token: Keyword         Lexeme: integer**
**Token: Separator       Lexeme: ,**
     <Parameter List> -> <Parameter> | <Parameter> , <Parameter List>
     <Parameter> -> <IDs> <Qualifier>
     <IDs> -> <Identifier> | <Identifier>, <IDs>
**Token: Identifier      Lexeme: b**
     <Qualifier> -> integer | boolean | real
**Token: Keyword         Lexeme: integer**
**Token: Separator       Lexeme: )**
     <Opt Declaration List> -> <Empty>
     <Empty> -> epsilon
     <Body> -> { <Statement List> }
**Token: Separator       Lexeme: {**
     <Statement List> -> <Statement> | <Statement> <Statement List>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <If> -> if(<Condition>)<Statement> <If Prime>
**Token: Keyword         Lexeme: if**
**Token: Separator       Lexeme: (**
     <Condition> -> <Expression> <Relop> <Expression>
     <Expression> -> <Term> <Expression Prime>
     <Term> -> <Factor><Term Prime>
     <Factor> -> <Primary>
     <Primary> -> <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | <Real> | true | false
**Token: Identifier      Lexeme: b**
     <Primary Prime> -> <Empty>
     <Empty> -> epsilon
     <Term Prime> -> <Empty>
     <Empty> -> epsilon
     <Expression Prime> -> <Empty>
     <Empty> -> epsilon
     <Relop> -> == | != | > | < | <= | =>
**Token: Operator        Lexeme: ==**
     <Expression> -> <Term> <Expression Prime>
     <Term> -> <Factor><Term Prime>
     <Factor> -> <Primary>
     <Primary> -> <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | <Real> | true | false
**Token: Integer         Lexeme: 0**
     <Term Prime> -> <Empty>
     <Empty> -> epsilon
     <Expression Prime> -> <Empty>
     <Empty> -> epsilon
**Token: Separator       Lexeme: )**
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Return> -> return <Return Prime>
**Token: Keyword         Lexeme: return**
     <Return Prime> -> <Expression> ;
     <Expression> -> <Term> <Expression Prime>
     <Term> -> <Factor><Term Prime>
     <Factor> -> <Primary>
     <Primary> -> <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | <Real> | true | false
**Token: Integer         Lexeme: 0**
     <Term Prime> -> <Empty>
     <Empty> -> epsilon
     <Expression Prime> -> <Empty>
     <Empty> -> epsilon
**Token: Separator       Lexeme: ;**
     <If Prime> -> else <Statement> endif
**Token: Keyword         Lexeme: else**
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Return> -> return <Return Prime>
**Token: Keyword         Lexeme: return**
     <Return Prime> -> <Expression> ;
     <Expression> -> <Term> <Expression Prime>
     <Term> -> <Factor><Term Prime>
     <Factor> -> <Primary>
     <Primary> -> <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | <Real> | true | false
**Token: Identifier      Lexeme: a**
     <Primary Prime> -> <Empty>
     <Empty> -> epsilon
     <Term Prime> -> * <Factor> <Term Prime> | / <Factor> <Term Prime>
**Token: Operator        Lexeme: /**
     <Factor> -> <Primary>
     <Primary> -> <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | <Real> | true | false
**Token: Identifier      Lexeme: b**
     <Primary Prime> -> <Empty>
     <Empty> -> epsilon
     <Term Prime> -> <Empty>
     <Empty> -> epsilon
     <Expression Prime> -> <Empty>
     <Empty> -> epsilon
**Token: Separator       Lexeme: ;**
**Token: Keyword         Lexeme: endif**
**Token: Separator       Lexeme: }**
**Token: Separator       Lexeme: $$**
     <Opt Declaration List> -> <Declaration List>
     <Declaration List> -> <Declaration> ; | <Declaration> ; <Declaration List>
     <Declaration> -> <Qualifier><IDs>
     <Qualifier> -> integer | boolean | real
**Token: Keyword         Lexeme: integer**
     <IDs> -> <Identifier> | <Identifier>, <IDs>
**Token: Identifier      Lexeme: x**
**Token: Separator       Lexeme: ,**
     <IDs> -> <Identifier> | <Identifier>, <IDs>
**Token: Identifier      Lexeme: y**
**Token: Separator       Lexeme: ;**
**Token: Separator       Lexeme: $$**
     <Statement List> -> <Statement> | <Statement> <Statement List>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Scan> -> scan(<IDs>);
**Token: Keyword         Lexeme: scan**
**Token: Separator       Lexeme: (**
     <IDs> -> <Identifier> | <Identifier>, <IDs>
**Token: Identifier      Lexeme: x**
**Token: Separator       Lexeme: ,**
     <IDs> -> <Identifier> | <Identifier>, <IDs>
**Token: Identifier      Lexeme: y**
**Token: Separator       Lexeme: )**
**Token: Separator       Lexeme: ;**
     <Statement List> -> <Statement> | <Statement> <Statement List>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Print> -> print ( <Expression>) ;
**Token: Keyword         Lexeme: print**
**Token: Separator       Lexeme: (**
     <Expression> -> <Term> <Expression Prime>
     <Term> -> <Factor><Term Prime>
     <Factor> -> <Primary>
     <Primary> -> <Identifier> <Primary Prime> | <Integer> | ( <Expression> ) | <Real> | true | false
**Token: Identifier      Lexeme: add**
     <Primary Prime> -> ( <IDs> )
**Token: Separator       Lexeme: (**
     <IDs> -> <Identifier> | <Identifier>, <IDs>
**Token: Identifier      Lexeme: x**
**Token: Separator       Lexeme: ,**
     <IDs> -> <Identifier> | <Identifier>, <IDs>
**Token: Identifier      Lexeme: y**
**Token: Separator       Lexeme: )**
     <Term Prime> -> <Empty>
     <Empty> -> epsilon
     <Expression Prime> -> <Empty>
     <Empty> -> epsilon
**Token: Separator       Lexeme: )**

 SYNTAX ERROR: 
Expected Separator, but got Keyword

